// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refreshtokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
       $1, $2, $3, $4, $5, $6
    )
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refreshtokens
where $1 = token
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE refreshtokens
SET revoked_at = $1,
        updated_at = $2
where $3 = token
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type UpdateRefreshTokenParams struct {
	RevokedAt sql.NullTime
	UpdatedAt time.Time
	Token     string
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshToken, arg.RevokedAt, arg.UpdatedAt, arg.Token)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
